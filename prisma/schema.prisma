generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  enseignant
  eleve
  parent
}

enum Sexe {
  M
  F
}

enum Niveau {
  primaire
  secondaire
}

enum TypeNote {
  PREMIERE_PERIODE @map("1P")
  DEUXIEME_PERIODE @map("2P")
  EXAMEN           @map("Exam")
  TOTAL            @map("Total")
  REPECHAGE        @map("Repechage")
}

enum StatutPresence {
  present
  absent
  justifie
}

enum Periode {
  matin
  apresMidi
}

model User {
  id            Int          @id @default(autoincrement())
  prenom        String
  email         String       @unique
  mot_de_passe  String
  role          Role         @default(eleve)
  date_creation DateTime     @default(now())
  eleve         Eleve?
  parents       Parents?
  professeurs   Professeurs?
}

model Eleve {
  id_eleve            Int             @id @default(autoincrement())
  nom                 String
  postnom             String
  date_naissance      DateTime
  sexe                Sexe            @default(M)
  adresse             String
  annee_academique_id Int
  userId              Int             @unique
  user                User            @relation(fields: [userId], references: [id])
  date_creation       DateTime        @default(now())
  eleves_parents      Eleves_parents?
  notes               Notes[]
  presences           Presences[]
}

model Parents {
  id_parent      Int              @id @default(autoincrement())
  nom            String
  postnom        String
  sexe           Sexe             @default(M)
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  eleves_parents Eleves_parents[]
}

model Eleves_parents {
  id_eleve_parent Int     @id @default(autoincrement())
  id_eleve        Int     @unique
  id_parent       Int
  eleve           Eleve   @relation(fields: [id_eleve], references: [id_eleve])
  parents         Parents @relation(fields: [id_parent], references: [id_parent])
}

model specialite {
  id_specialite  Int          @id @default(autoincrement())
  nom_specialite String
  professeurs    Professeurs?
}

model Professeurs {
  id_professeur        Int                    @id @default(autoincrement())
  nom                  String
  postnom              String
  sexe                 Sexe                   @default(M)
  userId               Int                    @unique
  id_specialite        Int                    @unique
  user                 User                   @relation(fields: [userId], references: [id])
  specialite           specialite             @relation(fields: [id_specialite], references: [id_specialite])
  professeurs_matieres Professeurs_matieres[]
}

model Professeurs_matieres {
  id_professeurs_matieres Int         @id @default(autoincrement())
  id_professeur           Int
  id_matiere              Int
  id_classe               Int
  professeurs             Professeurs @relation(fields: [id_professeur], references: [id_professeur])
  matieres                Matieres    @relation(fields: [id_matiere], references: [id_matiere])
  classe                  Classe      @relation(fields: [id_classe], references: [id_classe])
  date_creation           DateTime    @default(now())
}

model AnneeAcademique {
  id_annee_academique Int      @id @default(autoincrement())
  libelle             String
  date_debut          DateTime
  date_fin            DateTime
  actif               Boolean
  classe              Classe[]
  date_creation       DateTime @default(now())
}

model Filieres {
  id_filiere  Int      @id @default(autoincrement())
  nom_filiere String
  classe      Classe[]
}

model Classe {
  id_classe            Int                    @id @default(autoincrement())
  nom_classe           String
  niveau               Niveau                 @default(primaire)
  annee_academiqueId   Int
  id_filiere           Int
  annee_academique     AnneeAcademique        @relation(fields: [annee_academiqueId], references: [id_annee_academique])
  filieres             Filieres               @relation(fields: [id_filiere], references: [id_filiere])
  professeurs_matieres Professeurs_matieres[]
  date_creation        DateTime               @default(now())
}

model Matieres {
  id_matiere           Int                    @id @default(autoincrement())
  nom_matiere          String
  coefficient          Int                    @default(1)
  professeurs_matieres Professeurs_matieres[]
  notes                Notes[]
}

model Periodes {
  id_periode  Int     @id @default(autoincrement())
  nom_periode String
  notes       Notes[]
}

model Notes {
  id_note       Int      @id @default(autoincrement())
  id_eleve      Int
  id_matiere    Int
  id_periode    Int
  note          Int
  type          TypeNote @default(PREMIERE_PERIODE)
  eleve         Eleve    @relation(fields: [id_eleve], references: [id_eleve])
  matieres      Matieres @relation(fields: [id_matiere], references: [id_matiere])
  periodes      Periodes @relation(fields: [id_periode], references: [id_periode])
  date_creation DateTime @default(now())
}

model Absence_motifs {
  id_absence_motifs Int         @id @default(autoincrement())
  libelle           String
  presences         Presences[]
}

model Presences {
  id_presence       Int             @id @default(autoincrement())
  id_eleve          Int
  date_presence     DateTime
  status            StatutPresence  @default(present)
  id_absence_motifs Int?
  periode           Periode         @default(matin)
  created_by        Int
  date_creation     DateTime        @default(now())
  eleve             Eleve           @relation(fields: [id_eleve], references: [id_eleve])
  absence_motifs    Absence_motifs? @relation(fields: [id_absence_motifs], references: [id_absence_motifs])
}

model Jours_feries {
  id_jours_feries Int       @id @default(autoincrement())
  date            DateTime      @unique
  nom             String
}
